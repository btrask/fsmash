/* Copyright (C) 2011 Ben Trask

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */
var assert = require("assert");
var util = require("util");

var GeoIP = require("./");

var validIPTests = [
	{ ip: null, expected: null},

	// Number format
	{ ip: 0x00000000, expected: [0x00,0x00,0x00,0x00]},
	{ ip: 0xffffffff, expected: [0xff,0xff,0xff,0xff]},
	{ ip: 0x12345678, expected: [0x12,0x34,0x56,0x78]},
	{ ip: 0xabcdefab, expected: [0xab,0xcd,0xef,0xab]},

	// IPv4 format
	{ ip: "0.0.0.0", expected: [0x00,0x00,0x00,0x00]},
	{ ip: "10.0.1.1", expected: [0x0a,0x00,0x01,0x01]},
	{ ip: "192.168.1.1", expected: [0xc0,0xa8,0x01,0x01]},
	{ ip: "255.255.255.255", expected: [0xff,0xff,0xff,0xff]},

	// IPv6 format
	{ ip: "::", expected: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]},
	{ ip: "::1", expected: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01]},
	{ ip: "1::1", expected: [0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01]},
	{ ip: "2001:db8:0:0:1:0:0:1", expected: [0x20,0x01,0x0d,0xb8,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01]},
	{ ip: "2001:db8::1:0:0:1", expected: [0x20,0x01,0x0d,0xb8,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01]},
	{ ip: "2001:db8:aaaa:bbbb:cccc:dddd:eeee:0001", expected: [0x20,0x01,0x0d,0xb8,0xaa,0xaa,0xbb,0xbb,0xcc,0xcc,0xdd,0xdd,0xee,0xee,0x00,0x01]},
	{ ip: "2001:db8:aaaa:bbbb:cccc:dddd:eeee:1", expected: [0x20,0x01,0x0d,0xb8,0xaa,0xaa,0xbb,0xbb,0xcc,0xcc,0xdd,0xdd,0xee,0xee,0x00,0x01]},
	{ ip: "0000:0000:0000:0000:0000:0000:0000:0000", expected: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]},
	{ ip: "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", expected: [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff]},
];

validIPTests.map(function(test) {
	var actual = GeoIP.parseIP(test.ip);
	var expected = test.expected;
	if(expected) expected = new Buffer(expected);
	assert.deepEqual(expected, actual, "GeoIP.parseIP("+test.ip+") == "+util.inspect(expected)+"\nactual: "+util.inspect(actual));
});
